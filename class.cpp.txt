#include "{{CLASS_NAME}}.hpp"

int	{{CLASS_NAME}}::_added{{CLASS_NAME}} = 0;
int	{{CLASS_NAME}}::_deleted{{CLASS_NAME}} = 0;

// Constructor / Destructor / Surchage operator

{{CLASS_NAME}}::{{CLASS_NAME}} (void){
	this->id = {{CLASS_NAME}}::_added{{CLASS_NAME}}++;
	std::cout << "Création de {{CLASS_NAME}}: " << this->{{CLASS_DEFAULT_KEY}} << " (" << std::to_string(this->id) << ")" << std::endl;
}

{{CLASS_NAME}}::{{CLASS_NAME}} (const std::string& str){
	this->id = {{CLASS_NAME}}::_added{{CLASS_NAME}}++;
	this->{{CLASS_DEFAULT_KEY}} = str;
	std::cout << "Création de {{CLASS_NAME}}: " << this->{{CLASS_DEFAULT_KEY}} << " (" << std::to_string(this->id) << ")" << std::endl;
}

{{CLASS_NAME}}::{{CLASS_NAME}} (const {{CLASS_NAME}}& other)
{
	this->id = {{CLASS_NAME}}::_added{{CLASS_NAME}}++;
	this->{{CLASS_DEFAULT_KEY}} = other.{{CLASS_DEFAULT_KEY}};
	std::cout << "Création de {{CLASS_NAME}}: " << this->{{CLASS_DEFAULT_KEY}} << " (" << std::to_string(this->id) << ")" << std::endl;
}

{{CLASS_NAME}}& {{CLASS_NAME}}::operator=(const {{CLASS_NAME}}& other)
{
	if (this == &other) {
		return *this;
	}
	this->{{CLASS_DEFAULT_KEY}} = other.{{CLASS_DEFAULT_KEY}};
	return (*this);
}

{{CLASS_NAME}}::~{{CLASS_NAME}} (void)
{
	{{CLASS_NAME}}::_deleted{{CLASS_NAME}}++;
	std::cout << "Suppresion de {{CLASS_NAME}}: " << this->{{CLASS_DEFAULT_KEY}} << " (" << std::to_string(this->id) << ")" << std::endl;
}

// Private method

// Public method

int {{CLASS_NAME}}::nb{{CLASS_NAME}} ()
{
	return ({{CLASS_NAME}}::_added{{CLASS_NAME}} - {{CLASS_NAME}}::_deleted{{CLASS_NAME}});
}

std::string {{CLASS_NAME}}::get_{{CLASS_DEFAULT_KEY}}() {
	return (this->{{CLASS_DEFAULT_KEY}});
}

void {{CLASS_NAME}}::set_{{CLASS_DEFAULT_KEY}}(std::string value) {
	this->{{CLASS_DEFAULT_KEY}} = value;
}

int {{CLASS_NAME}}::getId ()
{
	return (this->id);
}